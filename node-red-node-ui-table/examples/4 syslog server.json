[
    {
        "id": "e8fd2fc9.509e",
        "type": "subflow",
        "name": "loadUiControl",
        "info": "# load uiControl setting\n\n## description\nthis subflow loads default settings defined in the subflow properties and adds runtime settings stored by the saveUiControl subflow\n\nit uses settings for individual ip adrsses if possible and usefull\n\n## properties\n - `uiName` enter the name of the ui node to load the ui_control objects if available\n - `ui_Control` default values for `ui_control` object\n - `Table` name of the dashboard tab. if provided it only send messages to dashboard nodes if tab is opened. if empty it will update when a new client connects\n - `Context` json string configuring where to store the data sits:\n\n```\n {\n     \"storeName\": \"uiControl\",\n     \"storeProvider\": \"file\",\n     \"storeTempName\": \"uiControlTemp\"\n }\n```\n This will be passed on 2nd output on initialisazion.\n \n - `muliUser` enable muli user feature (currently not working because dashboard don`t support infividual states for ui-nodes)\n\n \n## input\n\nconnect a ui control node to initalize ui node if a client connects\n\nconnect dashboard nodes if you like to store settings\n\n## output\n\n - passes msg object\n - Adds ui_control default object\n - Adds stored settings if available\n - Adds tableData if available\n \non the second output it send `msg.state` **\"online\"** or **\"offline\"** depending if the table is visible or not. Link to your formating function to bypass ui-table and store messages instead.\n",
        "category": "ui-table",
        "in": [
            {
                "x": 71,
                "y": 187,
                "wires": [
                    {
                        "id": "f7b608bf.20f908"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 394,
                "y": 119,
                "wires": [
                    {
                        "id": "f7b608bf.20f908",
                        "port": 1
                    }
                ]
            },
            {
                "x": 394,
                "y": 187,
                "wires": [
                    {
                        "id": "f7b608bf.20f908",
                        "port": 2
                    }
                ]
            },
            {
                "x": 394,
                "y": 255,
                "wires": [
                    {
                        "id": "f7b608bf.20f908",
                        "port": 3
                    }
                ]
            },
            {
                "x": 394,
                "y": 323,
                "wires": [
                    {
                        "id": "f7b608bf.20f908",
                        "port": 4
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "uiNode",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-mouse-pointer",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "ui_control",
                "type": "json",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-arrow-circle-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "json"
                        ]
                    }
                }
            },
            {
                "name": "tabName",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-file-o",
                    "label": {
                        "en-US": "Table"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "context",
                "type": "json",
                "value": "{\"storeName\":\"uiControl\",\"storeProvider\":\"file\",\"storeTempName\":\"uiControlTemp\"}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "defaultConfig",
                "type": "json",
                "value": "{\"uiParmeters\":{\"recordActive\":false,\"maxDisplayLines\":100,\"filterString\":\"[all]\"},\"firstRow\":0,\"counter\":0}",
                "ui": {
                    "icon": "font-awesome/fa-sliders",
                    "label": {
                        "en-US": "config"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStoreLines",
                "type": "num",
                "value": "50",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "label": {
                        "en-US": "maxStore"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "multiUser",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-user-plus",
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "inputLabels": [
            "from ui-control"
        ],
        "outputLabels": [
            "to ui-table",
            "to saveUiControl",
            "to UI",
            "Passthrough"
        ],
        "icon": "font-awesome/fa-database",
        "status": {
            "x": 394,
            "y": 51,
            "wires": [
                {
                    "id": "f7b608bf.20f908",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f7b608bf.20f908",
        "type": "function",
        "z": "e8fd2fc9.509e",
        "name": "loadUiControl",
        "func": "var msgOut={}; // output 1\nvar msgToInput=[]; // output 2 (initally undefined)\nvar msgToUI=[]; // output 3\nvar status={fill:\"yellow\",shape:\"dot\",text:\"\"};\nvar multiUser= env.get(\"multiUser\") || false;\n\nif (!msg.hasOwnProperty(\"socketid\")) {\n    status.text=\"No socketID!\"\n    return [{payload:status},null,null,null,msg];\n}\n\n// set uiNode\nvar uiNode=env.get(\"uiNode\");\nvar configContext=env.get(\"context\");\nif (!configContext || !configContext.hasOwnProperty(\"storeName\") || !configContext.hasOwnProperty(\"storeProvider\") || !configContext.hasOwnProperty(\"storeTempName\")) {\n    node.error(\"context not configured!\");\n    return;\n}\n\n// get store for socketid uiControl context\nvar uiControlTemp=global.get(configContext.storeTempName);\nif (uiControlTemp===undefined) {\n    uiControlTemp={\"clients\":{}};\n    global.set(configContext.storeTempName,uiControlTemp);\n}\n//initialize or update socketid to socketip lookup table;\nif (msg.hasOwnProperty(\"socketip\")) {\n    if (!uiControlTemp.hasOwnProperty(\"clients\")) uiControlTemp.clients={};\n    uiControlTemp.clients[msg.socketid]={};\n    uiControlTemp.clients[msg.socketid].socketip=msg.socketip;\n}\n\n// get store for persistent uiControl conetxt\nvar uiControl=global.get(configContext.storeName,configContext.storeProvider);\nif (uiControl===undefined) { // initialize store\n    uiControl={};\n    global.set(configContext.storeName,uiControl,configContext.storeProvider);\n}\nif (!uiControl.hasOwnProperty(uiNode)) uiControl[uiNode]={};\n\nuiControl.getIp= function(socketid) {\n    return uiControlTemp.clients[socketid].socketip;\n}\n\n// function to get thw config matching the client ip address or a general config\nuiControl.getConfig= function (socketid,uiControl,clients) {\n    if (!uiControl.hasOwnProperty(\"config\")) uiControl.config={};\n    if (socketid===\"default\") {\n        if (!uiControl.config.hasOwnProperty(\"default\")) uiControl.config[\"default\"]={};\n        return uiControl.config[\"default\"];\n    }\n    var socketip;\n    if (socketid!==undefined) {\n        if (!clients.hasOwnProperty(socketid)) clients[socketid]={};\n        socketip=clients[socketid].socketip;\n    } else {\n        node.error(\"[getConfig] SocketID undefined!\");\n    }\n    if (socketip!==undefined) {\n        if (!uiControl.config.hasOwnProperty(socketip)) uiControl.config[socketip]={};\n        return uiControl.config[socketip];\n    } else {\n        node.error(\"[getConfig] SocketIP not found! (\"+socketid+\")\")\n        return uiControl.config;\n    }\n}\n\nvar config\nif (multiUser) {\n    config=uiControl.getConfig(msg.socketid, uiControl[uiNode], uiControlTemp.clients);\n} else {\n    config=uiControl.getConfig(\"default\", uiControl[uiNode], uiControlTemp.clients);\n}\nuiControl=uiControl[uiNode];\n\n// initialize und update UI\nif (!uiControl.config.hasOwnProperty(\"maxStoreLines\")) {\n    uiControl.config.maxStoreLines=env.get(\"maxStoreLines\") || 50;\n    msgToUI.push({\"topic\":\"maxStoreLines\",\"payload\":uiControl.config.maxStoreLines});\n}\n\n// store all values if msg.storeValue msg arrives and give feedback\nif (msg.hasOwnProperty(\"storeValue\")) {\n    config.params.uiParmeters[msg.storeValue]=msg.payload;\n    msgToUI.push(RED.util.cloneMessage(msg));\n    msgToUI[msgToUI.length-1].sessionid=msg.socketid\n}\n\n// handle command send by msg.command\nif (msg && msg.hasOwnProperty(\"command\")) {\n    msgToInput.push(RED.util.cloneMessage(msg));\n    status.text=msg.command+\" :\"+msg.payload;\n    switch(msg.command) {\n        case \"deleteRecords\":\n            if (msg.payload===\"OK\") {\n                uiControl.tableData=[];\n                uiControl.filterList=[\"[any]\"];\n                msg.payload=\"OK\"; // to trigger redraw\n                msg.name=env.get(\"tabName\");\n                msgToInput[msgToInput.length-1].command=\"resetCounter\";\n                msgToInput[msgToInput.length-1].payload=0;\n            } else {\n                return;\n            }\n            break;\n        case \"recordActive\":\n            msgToInput[msgToInput.length-1].payload=config.params.uiParmeters.recordActive;\n            return [{payload:status},null,msgToInput,msgToUI];\n        case \"maxStoreLines\":\n            uiControl.config.maxStoreLines=Number(msg.payload) || 100; // don`t store in config.ip as there is only one buffer\n            return [{payload:status},null,msgToInput,msgToUI];\n        case \"maxDisplayLines\":\n            msgToInput[msgToInput.length-1].payload=config.params.uiParmeters.maxDisplayLines;\n            return [{payload:status},null,msgToInput,msgToUI];\n        case \"filterString\":\n            if (msg.payload===\"[all]\" || msg.payload===\"\") {\n                msg.payload={\n                    command:\"clearFilter\",\n                    arguments:[],\n                    \"returnPromise\": false\n                }\n            } else {\n                msg.payload={\n                    command:\"setFilter\",\n                    arguments:[\"hostname\",\"=\",msg.payload],\n                    \"returnPromise\": false\n                }\n            }\n            return[{payload:status},msg,msgToInput,msgToUI];\n    }\n}\n\n// handle messages from ui-control node\nswitch (msg.payload) {\n    case \"lost\" : // socket lost so clean temp settings\n        if (uiControlTemp.clients.hasOwnProperty(msg.socketid)) {\n            delete uiControlTemp.clients[msg.socketid];\n            status={fill:\"blue\",shape:\"dot\",text:\"settings deleted\"};\n            return [{payload:status},null,null];\n        }\n        break;\n    case \"OK\":\n    case \"change\":\n    case \"connect\":\n        msgOut.socketid=msg.socketid;\n        msgToInput.push(RED.util.cloneMessage(msg));\n        msgToInput[msgToInput.length-1].command=\"state\"\n        msgToInput[msgToInput.length-1].uiNode=uiNode;\n        msgToInput[msgToInput.length-1].configContext=configContext;\n        msgToInput[msgToInput.length-1].multiUser=multiUser;\n\n        if (msg.name===env.get(\"tabName\") || msg.payload===\"connect\") {\n            // load default settings into UI\n            if (!config.hasOwnProperty(\"params\")) config.params=RED.util.cloneMessage(env.get(\"defaultConfig\"));\n            Object.keys(config.params.uiParmeters).forEach(function (key) {\n                msgToUI.push({\"topic\":key,\"socketid\":msg.socketid,\"payload\":config.params.uiParmeters[key]});\n            });\n            \n            // set ui_control defaults\n            if (env.get(\"ui_control\")) {\n                msgOut.ui_control=env.get(\"ui_control\");\n                status={fill:\"green\",shape:\"dot\",text:\"defaults loaded\"};\n            }\n\n            var updateCounter = 0;\n            var columnID=\"\";\n            \n            // order columns if modified in runtime\n            // not the most elegant programming style: Improvements welcome ;)\n            \n            if (config.hasOwnProperty(\"columnOrder\")){\n\n                var addedColumns = 0;\n                var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n                    for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                        for (var sortColumn in sortColumns) {\n                            if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                                targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                                sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                                layoutColumn=addedColumns; // jump forward after childes added\n                            } else {\n                                if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                                    targetColumns.push(sortColumns[sortColumn]);\n                                    addedColumns++;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }                 \n                \n                var newColumns=[];\n                sortColumnsByLayout(msgOut.ui_control.tabulator.columns,config.columnOrder,newColumns);\n                msgOut.ui_control.tabulator.columns=newColumns;\n            }\n            \n            var updateColumns = function(columns,property) {\n                // add or modifiy properties if modified in runtime\n                for (var column of columns) {\n                    if (column.hasOwnProperty(\"columns\") && Array.isArray(column.columns)) {\n                        updateColumns(column.columns,property);\n                    } else {\n                        columnID=column.field+\":\"+column.title;\n                        if (config.hasOwnProperty(columnID) &&\n                            config[columnID].hasOwnProperty(property)) {\n                                \n                            column[property]=config[columnID][property]\n                            updateCounter++;\n                        }\n                    }\n                }\n            }\n            \n            updateColumns(msgOut.ui_control.tabulator.columns,\"width\")\n            if (updateCounter>0) {\n                status.fill=\"green\";\n                status.shape=\"dot\";\n                status.text+=\" (\"+updateCounter+ \" updates)\";\n            }\n\n            // restore stored table Data\n            if (uiControl.hasOwnProperty(\"tableData\")) {\n                msgOut.payload=uiControl.tableData;\n                // set counter & first row to match restored data\n                if (uiControl.tableData.length>0) {\n                    config.params.counter=uiControl.tableData[0].id;\n                    config.params.firstRow=uiControl.tableData[uiControl.tableData.length-1].id;\n                }                \n                status.text+=msgOut.payload.length + \" rows\"\n            } else {\n                config.params.counter=0;\n                config.params.firstRow=0;\n                msgOut.payload=[]; // send empty array to clear table\n                msgToInput.push({\"command\":\"resetCounter\",\"payload\":0});\n            }\n\n            // update filter List\n            if (uiControl.hasOwnProperty(\"filterList\")) {\n                msgToUI.push({\"topic\":\"filterString\",\"socketid\":msg.socketid,\"options\":uiControl.filterList});\n            }\n\n            config.params.visible=true;\n            return [{payload:status},msgOut,msgToInput,msgToUI];\n        }\n        \n        // send online/offline messages if tab state changes\n        if (msg.name===env.get(\"tabName\")) {\n            config.params.visible=true;\n            status={fill:\"green\",shape:\"dot\",text:\"online\"};\n        } else {\n            config.params.visible=false;\n            status={fill:\"yellow\",shape:\"dot\",text:\"offline\"};\n        }\n\n        return [{payload:status},null,msgToInput,msgToUI];\n    default:\n        node.error({\"payload:\":msg.payload,\"tab:\":env.get(\"tabName\")})\n        status={fill:\"red\",shape:\"dot\",text:msg.payload+\" unhandeled\"};\n        return [{payload:status},null,null,msgToUI];\n}\n",
        "outputs": 5,
        "noerr": 0,
        "x": 199,
        "y": 187,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ],
        "outputLabels": [
            "status",
            "ui-table",
            "to input function",
            "to dashboard",
            "passthrough"
        ]
    },
    {
        "id": "868280d8.dfda9",
        "type": "subflow",
        "name": "saveUiControl",
        "info": "# save uiControl setting\n\n## description\nthis subflow saves settings to flow context store+\n\n## properties\n - `tempColumnOrder` true if column order should \"per session\"\n - `filterProperty` property to filter. A list of possible options will be sent on 2nd output\n\n## input\n\n - `msg.command=\"state\"` to configure new clients\n - `msg.ui_control.callback` messages for ui-table\n\n## output\n\n 1. passes msg object\n 2. message to update other dashboard UI nodes like filter presets\n",
        "category": "",
        "in": [
            {
                "x": 37,
                "y": 119,
                "wires": [
                    {
                        "id": "f1ca2f97.e3436"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 119,
                "wires": [
                    {
                        "id": "f1ca2f97.e3436",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 187,
                "wires": [
                    {
                        "id": "f1ca2f97.e3436",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tempColumnOrder",
                "type": "bool",
                "value": "false",
                "ui": {
                    "icon": "font-awesome/fa-sort-amount-asc",
                    "label": {
                        "en-US": "tempOrder"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "filterProperty",
                "type": "str",
                "value": "hostname",
                "ui": {
                    "icon": "font-awesome/fa-filter",
                    "label": {
                        "en-US": "Filter"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "font-awesome/fa-database",
        "status": {
            "x": 360,
            "y": 51,
            "wires": [
                {
                    "id": "f1ca2f97.e3436",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f1ca2f97.e3436",
        "type": "function",
        "z": "868280d8.dfda9",
        "name": "saveUiControl",
        "func": "var msgUI=[];\nvar status={fill:\"yellow\",shape:\"dot\",text:msg.topic+\"=\"+msg.payload};\nvar configContext=flow.get(\"$parent.configContext\");\nvar uiNode=flow.get(\"$parent.uiNode\");\nvar multiUser=flow.get(\"$parent.multiUser\") || false;\n// handle command messages\nif (msg.hasOwnProperty(\"command\")) {\n    status.text=\"command:\"+msg.command;\n    switch (msg.command) {\n        case (\"state\"):\n            if (msg.hasOwnProperty(\"configContext\")) {\n                configContext=msg.configContext;\n                flow.set(\"$parent.configContext\",configContext);\n            }\n            if (msg.hasOwnProperty(\"uiNode\")) {\n                uiNode=msg.uiNode;\n                flow.set(\"$parent.uiNode\",uiNode);\n            }\n            if (msg.hasOwnProperty(\"multiUser\")) {\n                multiUser=msg.multiUser;\n                flow.set(\"$parent.multiUser\",multiUser);\n            }\n            return [{payload:status},null];\n    }\n}\n\n// store for uiControl callbacks data\nif (!configContext || !configContext.hasOwnProperty(\"storeName\") || !configContext.hasOwnProperty(\"storeProvider\") || !configContext.hasOwnProperty(\"storeTempName\")) {\n    node.error(\"context not configured!\");\n    return;\n}\nif (!uiNode) {\n    node.error(\"uiNode not configured!\");\n    return;\n}\n\nvar uiControlTemp=global.get(configContext.storeTempName);\nif (uiControlTemp===undefined) { // initialize store\n    uiControlTemp={};\n    global.set(configContext.storeTempName,uiControlTemp);\n}\n\n// store for global uiControl\nvar uiControl=global.get(configContext.storeName,configContext.storeProvider);\nif (uiControl===undefined) { // initialize store\n    uiControl={};\n    global.set(configContext.storeName,uiControl,configContext.storeProvider);\n}\n\n// set uiNode\nif (!uiControl.hasOwnProperty(uiNode)) uiControl[uiNode]={};\nvar uiFunction=uiControl;\nuiControl=uiControl[uiNode];\nif (uiControl===undefined) {\n    node.error(\"no configuration for \"+uiNode+\" found\");\n    return;\n}\nif (!uiControl.hasOwnProperty(\"tableData\") || !Array.isArray(uiControl.tableData)) uiControl.tableData=[];\n\n// get or initalize maxStoreLines\nvar maxStoreLines=100;\nif (uiControl.config.hasOwnProperty(\"maxStoreLines\")) {\n    maxStoreLines=uiControl.config.maxStoreLines;\n} else {\n    node.error(\"uiControl.config.maxStoreLines undefined!\");\n    return;\n}\n\n// handle incomming messages form ui-table\nif (msg.hasOwnProperty(\"ui_control\") &&\n    msg.ui_control.hasOwnProperty(\"callback\")) {\n    var config=uiFunction.getConfig((multiUser) ? msg.socketid:\"default\", uiControl, uiControlTemp.clients);\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save column sizes globaly\n            config[msg.ui_control.columnWidths.field+\":\"+msg.ui_control.columnWidths.title]={\"width\":msg.ui_control.columnWidths.width};\n            status={fill:\"green\",shape:\"dot\",text: msg.ui_control.callback+\": \"+msg.ui_control.columnWidths.field+\".width=\"+msg.ui_control.columnWidths.width};\n            break;\n        case \"columnMoved\": // save column order\n            config.columnOrder=msg.ui_control.columns;\n            status={fill:\"green\",shape:\"dot\",text: msg.ui_control.callback+\": order \"+uiControlTemp.columnOrder.length+\" (temp)\"};\n            break;\n        case \"addData\": // sucessfully added a new row\n            status={fill:\"green\",shape:\"dot\",text: msg.ui_control.callback+\" success (\"+uiControl.tableData.length+\")\"};\n            break;\n        default:\n            status={fill:\"red\",shape:\"dot\",text: \"callback: \"+msg.ui_control.callback+\"?\"};\n            break;\n    }\n}\n\nif (msg.command===\"storeRow\") {\n    if (msg.placeOnTop) {\n        uiControl.tableData.unshift(msg.payload);\n        if (uiControl.tableData.length>maxStoreLines) { // delete rows from bottom\n            uiControl.tableData.splice(maxStoreLines,uiControl.tableData.length-1);\n        }\n    } else {\n        uiControl.tableData.push(msg.payload);\n        if (uiControl.tableData.length>maxStoreLines) { // delete rows from top\n            uiControl.tableData.splice(0,uiControl.tableData.length-maxStoreLines);\n        }                \n    }\n    \n    // collect possible filter options and update dropdown if nessesary\n    var filterProperty=env.get(\"filterProperty\");\n    if (msg.payload.hasOwnProperty(filterProperty)) {\n        if (!uiControl.hasOwnProperty(\"filterList\")) uiControl.filterList=[\"[all]\"];\n        if (!uiControl.filterList.includes(msg.payload[filterProperty])) {\n            uiControl.filterList.push(msg.payload[filterProperty]);\n            msgUI.push({\"topic\":\"filterString\",\"options\":uiControl.filterList});\n        }\n    }\n    status={fill:\"green\",shape:\"dot\",text: msg.command+\": \"+uiControl.tableData.length+\" rows\"};\n}\n\nreturn [{payload:status},msg,msgUI];",
        "outputs": 3,
        "noerr": 0,
        "x": 199,
        "y": 119,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6dbb0f83.0bf06",
        "type": "syslog-input",
        "z": "1e193208.71985e",
        "name": "syslog",
        "socktype": "udp",
        "address": "",
        "port": "514",
        "topic": "",
        "x": 101,
        "y": 272,
        "wires": [
            [
                "d54606f7.055af8"
            ]
        ]
    },
    {
        "id": "63cf45e5.3e8d8c",
        "type": "ui_table",
        "z": "1e193208.71985e",
        "group": "51ce6aa1.620754",
        "name": "Syslog",
        "order": 6,
        "width": "19",
        "height": "7",
        "columns": [],
        "outputs": 1,
        "cts": true,
        "x": 815,
        "y": 136,
        "wires": [
            [
                "4e5b6320.769b1c",
                "e6ca246c.97c3e8"
            ]
        ]
    },
    {
        "id": "fdd77b85.5f81a8",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "save ui_control",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1236,
        "y": 187,
        "wires": []
    },
    {
        "id": "4e5b6320.769b1c",
        "type": "subflow:868280d8.dfda9",
        "z": "1e193208.71985e",
        "name": "",
        "env": [
            {
                "name": "uiNode",
                "value": "syslogTable",
                "type": "str"
            }
        ],
        "x": 1015,
        "y": 221,
        "wires": [
            [
                "fdd77b85.5f81a8"
            ],
            [
                "aafd2539.905ba8"
            ]
        ]
    },
    {
        "id": "f96fd3f9.0f311",
        "type": "subflow:e8fd2fc9.509e",
        "z": "1e193208.71985e",
        "name": "",
        "env": [
            {
                "name": "uiNode",
                "value": "syslogTable",
                "type": "str"
            },
            {
                "name": "ui_control",
                "value": "{\"tabulator\":{\"columnResized\":\"function(column){  var newColumn = {         title:column._column.definition.title,field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"columnMoved = function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"groupHeader\":\"function (value, count, data, group) {return value + \\\"<span style='color:#d00; margin-left:10px;'>(\\\" + count + \\\" Termostat\\\"+((count>1) ? \\\"e\\\" : \\\"\\\") + \\\")</span>\\\";}\",\"columns\":[{\"title\":\"Id\",\"field\":\"id\",\"width\":100},{\"title\":\"Time\",\"field\":\"timestamp\",\"width\":100,\"formatter\":\"datetime\",\"formatterParams\":{\"inputFormat\":\"YYYY-MM-DD hh:mm:ss\",\"outputFormat\":\"HH:MM:ss\",\"invalidPlaceholder\":\"(invalid time)\"}},{\"title\":\"Message\",\"field\":\"msg\",\"width\":100,\"headerFilter\":true},{\"title\":\"Tag\",\"field\":\"tag\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Date\",\"field\":\"timestamp\",\"width\":100,\"formatter\":\"datetime\",\"formatterParams\":{\"inputFormat\":\"YYYY-MM-DD hh:mm:ss\",\"outputFormat\":\"DD.MM.YY\",\"invalidPlaceholder\":\"(invalid Date)\"}},{\"title\":\"Facility\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Code\",\"field\":\"facilityCode\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Name\",\"field\":\"facility\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]},{\"title\":\"Severity\",\"columns\":[{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Code\",\"field\":\"severityCode\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"formatterParams\":{\"target\":\"_blank\"},\"title\":\"Severty\",\"field\":\"severity\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]},{\"title\":\"Client\",\"columns\":[{\"title\":\"Hostname\",\"field\":\"hostname\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Address\",\"field\":\"address\",\"width\":100,\"formatter\":\"link\",\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true},\"formatterParams\":{\"urlPrefix\":\"http://\",\"target\":\"_blank\"}},{\"title\":\"Port\",\"field\":\"port\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}},{\"title\":\"Protocol\",\"field\":\"family\",\"width\":100,\"headerFilter\":\"select\",\"headerFilterParams\":{\"values\":true}}]}],\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\"},\"customHeight\":12}",
                "type": "json"
            },
            {
                "name": "tabName",
                "value": "ui-table example",
                "type": "str"
            },
            {
                "name": "context",
                "value": "{\"storeName\":\"uiControl\",\"storeProvider\":\"file\",\"storeTempName\":\"uiControlTemp\",\"storeTempProvider\":\"default\"}",
                "type": "json"
            },
            {
                "name": "defaultConfig",
                "value": "{\"uiParmeters\":{\"recordActive\":false,\"maxStoreLines\":50,\"maxDisplayLines\":100,\"filterString\":\"[all]\"},\"firstRow\":0,\"counter\":0}",
                "type": "json"
            }
        ],
        "x": 318,
        "y": 153,
        "wires": [
            [
                "4dac4c3e.e069b4",
                "63cf45e5.3e8d8c"
            ],
            [
                "d54606f7.055af8",
                "a7c69580.a2cec8",
                "4e5b6320.769b1c"
            ],
            [
                "4608e26c.241b8c"
            ],
            []
        ]
    },
    {
        "id": "ff7d0dc8.fae43",
        "type": "ui_ui_control",
        "z": "1e193208.71985e",
        "name": "",
        "events": "all",
        "x": 77,
        "y": 136,
        "wires": [
            [
                "9b5a4f48.5c27c",
                "f96fd3f9.0f311"
            ]
        ]
    },
    {
        "id": "9b5a4f48.5c27c",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "ui control",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 298,
        "y": 102,
        "wires": []
    },
    {
        "id": "4dac4c3e.e069b4",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "load ui_control",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 624,
        "y": 68,
        "wires": []
    },
    {
        "id": "bc43cef0.26fe4",
        "type": "inject",
        "z": "1e193208.71985e",
        "name": "demo data",
        "topic": "",
        "payload": "{\"facility\":\"daemon\",\"facilityCode\":3,\"severity\":\"info\",\"severityCode\":6,\"tag\":\"systemd[1]\",\"timestamp\":\"2018-12-26T17:53:57.000Z\",\"hostname\":\"localhost\",\"address\":\"127.0.0.1\",\"family\":\"IPv4\",\"port\":38514,\"size\":80,\"msg\":\"some demo data\"}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 111,
        "y": 323,
        "wires": [
            [
                "d54606f7.055af8"
            ]
        ]
    },
    {
        "id": "d54606f7.055af8",
        "type": "function",
        "z": "1e193208.71985e",
        "name": "syslog2ui-table",
        "func": "var counter=context.get(\"counter\") || 0\nvar configContext=context.get(\"configContext\");\nvar uiNode=context.get(\"uiNode\");\nvar multiUser=context.get(\"multiUser\") || false;\n// handle command messages\nif (msg.hasOwnProperty(\"command\")) {\n    node.status({fill:\"yellow\",shape:\"dot\",text:msg.command+\"=\"+msg.payload});\n    switch (msg.command) {\n        case (\"state\"):\n            if (msg.hasOwnProperty(\"configContext\")) {\n                configContext=msg.configContext;\n                context.set(\"configContext\",configContext);\n            }\n            if (msg.hasOwnProperty(\"uiNode\")) {\n                uiNode=msg.uiNode;\n                context.set(\"uiNode\",uiNode);\n            }\n            if (msg.hasOwnProperty(\"multiUser\")) {\n                multiUser=msg.multiUser;\n                context.set(\"multiUser\",multiUser);\n            }\n            return;\n        case (\"resetCounter\"):\n            counter= 0;\n            context.set(\"counter\",counter);\n            return [{\"payload\": {\"command\": \"clearData\",\"arguments\": [], \"returnPromise\": false}},null];\n        default: \n            return;\n    }\n}\n\nvar msgOut;\n\n// get context variables\nif (!configContext || !configContext.hasOwnProperty(\"storeName\") || !configContext.hasOwnProperty(\"storeProvider\")) {\n    return;\n}\nvar uiControl=global.get(configContext.storeName,configContext.storeProvider);\nvar clients=global.get(configContext.storeTempName);\nif (clients && clients.hasOwnProperty(\"clients\")) {\n    clients=clients.clients;\n} else {\n    node.error(\"clients not defined in \"+configContext.storeTempName);\n    return;\n}\n\n\nif (uiNode===undefined) {node.error(\"uiNode not defined!\"); return;}\nif (uiControl===undefined) {node.error(\"uiControl not defined!\"); return;}\n\n// ----------------------------------------------------------------------------\n// make some adjustements to the incomming data when nessesary here\n// ----------------------------------------------------------------------------\n\n// update adjust timestamp to local timezone\nvar timestamp= new Date(Date.now());\ntimestamp= new Date(timestamp.getTime() - timestamp.getTimezoneOffset() * 60000);\nmsg.payload.timestamp= timestamp.toISOString();\n\n// correct host name (ESPEasy adds <#> infront where # is the severty code)\nif (msg.payload.hostname.substr(0,1)===\"<\" && msg.payload.hostname.substr(2,1)===\">\") {\n    msg.payload.hostname=msg.payload.hostname.slice(3);\n}\n\n// ----------------------------------------------------------------------------\n// no changes below this line unless you know what you are doing ;)\n\n// add global id to row for later referece i.e. deleting rows\ncounter++;\ncontext.set(\"counter\",counter);\nmsg.payload.id=counter;\n\n// format the \"addData\" command of tabulator to add a new row to the top of the table\nmsgOut={\n    \"payload\": {\n        \"command\": \"addData\",\n        \"arguments\": [msg.payload,true],\n        \"returnPromise\": true\n    }\n}\n\n// allways send row to second output to store them\nnode.send([null,{\"command\":\"storeRow\",\"payload\":msg.payload, \"placeOnTop\":true}]);\n\n// message to delete individual rows without returning a promise\nvar msgDeleteRow={\n    \"payload\": {\n        \"command\": \"deleteRow\",\n        \"arguments\": 0,\n        \"returnPromise\": false\n    }\n}\n\n// loop through all connected clinets and send them individual data\n\nvar deletedCounter = 0;\nvar sentCounter = 0; // indicator the a line was sent once\nvar client;\nvar keys = Object.keys(clients);\nif (!multiUser) keys = [keys[0]]; // if multiuser disabled use only first available client config\nfor (const key of keys) {\n    client=uiControl[uiNode].config[(multiUser) ? clients[key].socketip:\"default\"].params;\n    if (client.uiParmeters.recordActive && (!multiUser  || client.visible)) {\n        // apply host filter BEFORE sending new data to ui-table\n        if (!client.uiParmeters.hasOwnProperty(\"filterString\")) client.uiParmeters.filterString=\"[all]\";\n        if (client.uiParmeters.filterString===\"[all]\" || client.uiParmeters.filterString===msg.payload.hostname) {\n            client.counter=counter;\n            if (client.firstRow>counter) client.firstRow=counter; // adjust client counter after reset;\n            msgOut.socketid=client.socketid;\n            // first delete row from the bottom\n            if (client.counter-client.firstRow>client.uiParmeters.maxDisplayLines) {\n                if (client.counter-client.firstRow > uiControl[uiNode].config.maxStoreLines+client.uiParmeters.maxDisplayLines) { // client is behind buffer!\n                    var msgReplaceData={\n                        \"payload\": {\n                            \"command\": \"replaceData\",\n                            \"arguments\": [uiControl[uiNode].tableData],\n                            \"returnPromise\": false\n                        }\n                    }\n                    node.send([msgReplaceData,null]);\n                    // adjust new first row;\n                    client.firstRow=uiControl[uiNode].tableData[uiControl[uiNode].tableData.length-1].id;\n                    // node.warn(\"client behind buffer, restoring buffer! new firstRow=\"+client.firstRow);\n                } else {\n                    var warnText=\"client exceed \"+client.uiParmeters.maxDisplayLines+\" counter:\"+client.counter+\" first:\"+client.firstRow;\n                    msgDeleteRow.payload.arguments=[];\n                \n                    for (var i=client.firstRow; i<client.counter-client.uiParmeters.maxDisplayLines; i++) {\n                        msgDeleteRow.payload.arguments.push(i);\n                    }\n                    deletedCounter+=msgDeleteRow.payload.arguments.length;\n                    warnText += \" delete \"+msgDeleteRow.payload.arguments.length+\" rows\";\n                    node.send([msgDeleteRow,null]);\n                    client.firstRow=client.counter-client.uiParmeters.maxDisplayLines;\n                    // warnText += \"client 1st row:\"+client.firstRow+\" [\"+msgDeleteRow.payload.arguments.toString()+\"]\";\n                    // node.warn(warnText);\n                }\n            }\n            // send new row to the top\n            if (multiUser) msgOut.socketid=key;\n            node.send([msgOut,null]);\n            sentCounter++;\n            if (sentCounter===1) {\n                var deletedText= (deletedCounter>0) ? \"del: \"+deletedCounter+\" \" : \"\";\n                node.status({fill:\"green\",shape:\"dot\",text:client.counter+\". msg \"+ deletedText +\"(\"+client.uiParmeters.filterString+\")\"});\n            } else {\n                node.status({fill:\"green\",shape:\"dot\",text:counter+\". msg sent to \"+sentCounter+\" clients\"});\n            }\n        }\n    } else {\n        \n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "x": 607,
        "y": 272,
        "wires": [
            [
                "63cf45e5.3e8d8c",
                "fed0aeb3.a329d"
            ],
            [
                "4e5b6320.769b1c",
                "9d305a21.304668"
            ]
        ],
        "outputLabels": [
            "to ui-table",
            "bypass"
        ],
        "icon": "node-red/swap.svg",
        "info": "# Format data to be displayed with ui-table\n\nUse this function node to format incomming data to be modified for ui-table\n\n## Example\n\n1. it corrects the time form UTC to local time\n\n```\nvar timestamp= new Date(Date.now());\ntimestamp= new Date(timestamp.getTime() - timestamp.getTimezoneOffset() * 60000);\nmsg.payload.timestamp= timestamp.toISOString();\n```\n\n2. format the \"addData\" command of tabulator to add a new row to the top of the table \n\n```\nvar msgOut={\n    \"payload\": {\n        \"command\": \"addData\",\n        \"arguments\": [msg.payload,true],\n        \"returnPromise\": true\n    }\n}\n```\n\n`command`: Tabulator command [see documentation](http://tabulator.info/docs/4.5/update#overview)\n\n`arguments`: Array with the arguments for the command function\n\n`returnPromise`: if `true` the ui-table will return the message if command sucessfully executed. Set to true to enable the saveUiControl subflow to store the data. otherwise it will not survive reload or tab changes.\n\n3. bypass ui-table if not currently visible\n4. fill host list for filtering\n"
    },
    {
        "id": "e6ca246c.97c3e8",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "from ui-table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1005,
        "y": 136,
        "wires": []
    },
    {
        "id": "bec529cb.a9bfc8",
        "type": "ui_dropdown",
        "z": "1e193208.71985e",
        "name": "filterString",
        "label": "Filter Host",
        "tooltip": "",
        "place": "Select Host",
        "group": "51ce6aa1.620754",
        "order": 1,
        "width": "7",
        "height": 1,
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "filterString",
        "x": 349,
        "y": 459,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "938f3076.e84a8",
        "type": "ui_button",
        "z": "1e193208.71985e",
        "name": "deleteRecords",
        "group": "51ce6aa1.620754",
        "order": 5,
        "width": 1,
        "height": 1,
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "deleteRecords",
        "payloadType": "str",
        "topic": "uiDeleteButton",
        "x": 369,
        "y": 663,
        "wires": [
            [
                "c3e235de.faff38"
            ]
        ]
    },
    {
        "id": "2b9bc827.b69618",
        "type": "ui_numeric",
        "z": "1e193208.71985e",
        "name": "maxStoreLines",
        "label": "maximum Store:",
        "tooltip": "maximum amount of rows to be saved in context store (limited by server)",
        "group": "51ce6aa1.620754",
        "order": 2,
        "width": 5,
        "height": 1,
        "wrap": false,
        "passthru": false,
        "topic": "maxStoreLines",
        "format": "{{value}}",
        "min": 0,
        "max": "200",
        "step": "10",
        "x": 369,
        "y": 510,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "7b320c4e.9e0654",
        "type": "ui_toast",
        "z": "1e193208.71985e",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "OK",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "OK/Cacel",
        "x": 706,
        "y": 663,
        "wires": [
            [
                "43a4caa3.06c034"
            ]
        ]
    },
    {
        "id": "c3e235de.faff38",
        "type": "change",
        "z": "1e193208.71985e",
        "name": "Question",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"Do you like to delete all records?\"",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Delete?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 553,
        "y": 663,
        "wires": [
            [
                "7b320c4e.9e0654"
            ]
        ]
    },
    {
        "id": "c58cb32.f70fd5",
        "type": "change",
        "z": "1e193208.71985e",
        "name": "topic2command",
        "rules": [
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "storeValue",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 658,
        "y": 561,
        "wires": [
            [
                "43a4caa3.06c034"
            ]
        ]
    },
    {
        "id": "43a4caa3.06c034",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "uiControlSettings",
        "links": [
            "41b7f798.8e6a48"
        ],
        "x": 865,
        "y": 612,
        "wires": []
    },
    {
        "id": "41b7f798.8e6a48",
        "type": "link in",
        "z": "1e193208.71985e",
        "name": "uiControlSettings",
        "links": [
            "43a4caa3.06c034"
        ],
        "x": 117,
        "y": 187,
        "wires": [
            [
                "f96fd3f9.0f311",
                "a8a0def.6ffd62"
            ]
        ]
    },
    {
        "id": "84e7d923.efb4d8",
        "type": "ui_numeric",
        "z": "1e193208.71985e",
        "name": "maxDisplayLines",
        "label": "Display:",
        "tooltip": "maximum amount of rows to be displayed (limited by client memory)",
        "group": "51ce6aa1.620754",
        "order": 3,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": false,
        "topic": "maxDisplayLines",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "step": "10",
        "x": 379,
        "y": 561,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "c2999e05.72156",
        "type": "ui_switch",
        "z": "1e193208.71985e",
        "name": "recordActive",
        "label": "",
        "tooltip": "",
        "group": "51ce6aa1.620754",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "decouple": "true",
        "topic": "recordActive",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 359,
        "y": 612,
        "wires": [
            [
                "c58cb32.f70fd5"
            ]
        ]
    },
    {
        "id": "a7c69580.a2cec8",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "to input function",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 607,
        "y": 323,
        "wires": []
    },
    {
        "id": "d34f8292.cb3c",
        "type": "switch",
        "z": "1e193208.71985e",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "filterString",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "maxStoreLines",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "maxDisplayLines",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "recordActive",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 169,
        "y": 544,
        "wires": [
            [
                "bec529cb.a9bfc8"
            ],
            [
                "2b9bc827.b69618"
            ],
            [
                "84e7d923.efb4d8"
            ],
            [
                "c2999e05.72156"
            ]
        ]
    },
    {
        "id": "aafd2539.905ba8",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "msgToUI",
        "links": [
            "566f70f.2d4579"
        ],
        "x": 1171,
        "y": 255,
        "wires": []
    },
    {
        "id": "566f70f.2d4579",
        "type": "link in",
        "z": "1e193208.71985e",
        "name": "msgToUI",
        "links": [
            "aafd2539.905ba8",
            "4608e26c.241b8c"
        ],
        "x": 66,
        "y": 544,
        "wires": [
            [
                "d34f8292.cb3c",
                "e8795311.41f4a"
            ]
        ]
    },
    {
        "id": "4608e26c.241b8c",
        "type": "link out",
        "z": "1e193208.71985e",
        "name": "msgToUI",
        "links": [
            "566f70f.2d4579"
        ],
        "x": 542,
        "y": 374,
        "wires": []
    },
    {
        "id": "a8a0def.6ffd62",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "ui message",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 308,
        "y": 221,
        "wires": []
    },
    {
        "id": "fed0aeb3.a329d",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "to ui-table",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 825,
        "y": 170,
        "wires": []
    },
    {
        "id": "e8795311.41f4a",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "msgToUI",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 196,
        "y": 697,
        "wires": []
    },
    {
        "id": "9d305a21.304668",
        "type": "debug",
        "z": "1e193208.71985e",
        "name": "to save",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 825,
        "y": 289,
        "wires": []
    },
    {
        "id": "51ce6aa1.620754",
        "type": "ui_group",
        "z": "",
        "name": "Syslog Server",
        "tab": "7653f2c6.4b174c",
        "order": 1,
        "disp": true,
        "width": "19",
        "collapse": false
    },
    {
        "id": "7653f2c6.4b174c",
        "type": "ui_tab",
        "z": "",
        "name": "ui-table example",
        "icon": "table",
        "order": 14,
        "disabled": false,
        "hidden": false
    }
]